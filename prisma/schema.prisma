// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id        String   @id @default(cuid())
  name      String

  users UsersInGroups[]
  spySessions SpySession[]
}

model User {
  id            String       @id @unique @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  spySessions   SpySession[]

  groups UsersInGroups[]
}

model UsersInGroups {
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
  admin  Boolean @default(false)
  selectByDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, groupId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SpySession {
  id         String      @id @unique @default(cuid())
  startTime  DateTime    @default(now())
  endTime    DateTime?
  recordings Recording[]
  userId     String?
  user       User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupId    String?
  group      Group?       @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Recording {
  id        String     @id @default(cuid())
  startTime DateTime   @default(now())
  endTime   DateTime?
  session   SpySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
}
